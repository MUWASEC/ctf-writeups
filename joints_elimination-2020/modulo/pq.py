import math
def isqrt(n):
  x = n
  y = (x + 1) // 2
  while y < x:
    x = y
    y = (x + n // x) // 2
  return x
def egcd(a, b):
  if a == 0:
    return (b, 0, 1)
  else:
    g, y, x = egcd(b % a, a)
    return (g, x - (b // a) * y, y)
def modinv(a, m):
  g, x, y = egcd(a, m)
  if g != 1:
    raise Exception('modular inverse does not exist')
  else:
    return x % m

e = 65537
n = 10277572973210015396114509978461325789039520167452352513097530812537233278537852490196789864637167280614241084537917733235253295152585036320818489868475070172597766108387993350187898664132706200120556785701810821247504895967464041760371571473198254204293024239267877707794812455671532243505668935576274263558055120021866999171395815271637724794082583348022955962360689735317321005185745471924366248556718703092964412182356953106514832707262112032472265570865929185813740802162994603820935899758111785169712710062618252648048232801502025921726453918958754082503428344577593706689456241538580051170410475901682919820407

for k in range(1, e):
  delta = 1 + 4*k*n*e
  sqr = isqrt(delta)
  if not sqr*sqr == delta:
    continue
  if (sqr - 1)%(2*k) == 0:
    p = (sqr - 1)//(2*k)
    q = n//p
    assert p*q == n
    print("Factorisation found!")
    break
print(p)
print(q)
